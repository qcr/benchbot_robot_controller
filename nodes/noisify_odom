#!/usr/bin/env python
#
# This node takes a ground truth pose publishing system and converts it to the
# noisy "odom -> base_link" + "map -> odom" corrections when localisation
# approach typical in robotics.
#
# We assume that "map -> odom" is not currently defined, but is instead
# provided by the "start_pose" param. The provided "odom -> base_link" is then
# pulled from the odometry on "in_topic_odom".
#
# The "map -> base_link" transform is left unchanged, but it now consists of a
# noisy "odom -> base_link" link plus ground truth "map -> odom" localisation
# link.
#
# Noise model is basic zero-mean Gaussian noise on velocity, but scaled by the
# velocity.  This leads to desirable results like 0 velocity having no noise /
# drift, and is tolerable within our velocity limits. May look at this making
# something more mature in the future. Current:
#       Linear vel noise = N(0, linear_vel * noise_linear)
#       Angular vel noise = N(0, angular_vel * noise_angular)

import benchbot_spatial as sp
import numpy as np
import rospy
import threading
import tf2_ros
import transforms3d as t3
from geometry_msgs.msg import (Point, Pose, Quaternion, Transform,
                               TransformStamped, Twist, Vector3)
from nav_msgs.msg import Odometry
from std_msgs.msg import String


def _noisy(std_dev):
    # Use the standard deviation as the mean as well as the std deviation
    # This feels super hacky but for me better represents wheel encoder error
    # usually perceived distance travelled will be greater than actual distance
    return np.random.normal(std_dev, std_dev)


def _SE3_to_pose_msg(pose):
    return Pose(
        position=Point(*pose[0:3, 3]),
        orientation=Quaternion(
            *np.roll(t3.quaternions.mat2quat(pose[0:3, 0:3]), -1)),
    )


def _SE3_to_tf_msg(pose):
    return Transform(
        translation=Vector3(*pose[0:3, 3]),
        rotation=Quaternion(*np.roll(t3.quaternions.mat2quat(pose[0:3,
                                                                  0:3]), -1)),
    )


class PoseNoisifier(object):

    def __init__(self):
        self.in_topic_odom = rospy.get_param("in_topic_odom", "/odom_raw")
        self.in_topic_start_pose = rospy.get_param("in_topic_start_pose",
                                                   "/odom_start_pose")
        self.in_topic_vel = rospy.get_param("in_topic_vel", "/cmd_vel")

        self.out_topic_odom = rospy.get_param("out_topic_odom", "/odom")
        self.out_frame_map = rospy.get_param("out_frame_map", "map")
        self.out_frame_odom = rospy.get_param("out_frame_odom", "odom")
        self.out_frame_robot = rospy.get_param("out_frame_robot", "base_link")

        self.noise_angular = rospy.get_param("noise_angular", 0.1)
        self.noise_linear = rospy.get_param("noise_linear", 0.1)

        self._lock = threading.Lock()

        self._start_pose = None
        self._last_time = None

        self._nodom = np.eye(4)
        self._initialised = False
        self._last_vel = Twist()

        self._tf = tf2_ros.TransformBroadcaster()

        self._pub_odom = rospy.Publisher(self.out_topic_odom,
                                         Odometry,
                                         queue_size=1)
        self._sub_odom = rospy.Subscriber(self.in_topic_odom, Odometry,
                                          self.pub)
        self._sub_start_pose = rospy.Subscriber(self.in_topic_start_pose,
                                                String, self.update_start_pose)
        self._sub_vel = rospy.Subscriber(self.in_topic_vel, Twist,
                                         self.update_vel)

    def pub(self, odom_msg):
        with self._lock:

            current_time = rospy.get_time()
            time_diff = current_time - self._last_time
            # Bail if we don't have valid data to work with
            if self._start_pose is None:
                return

            # Initialise that which needs initialisation
            if not self._initialised:
                self._nodom = sp.pose_msg_to_SE3(odom_msg.pose)
                self._last_odom = sp.pose_msg_to_SE3(odom_msg.pose)
                self._initialised = True
            
            # Calculate the velocity of the last segment of time using odometery.
            # Note, previous version used command velocity but this differed too much
            # from "true" velocity
            # TODO enhancement would be to use actual wheel rotations and translate that into
            # an estimate of velocity but that is too much for now. Current version thinks
            # it is stationary even if the wheels keep spinning as the robot hits a wall
            current_odom = sp.pose_msg_to_SE3(odom_msg.pose)
            odom_diff = np.matmul(np.linalg.inv(self._last_odom), current_odom)
            vel_angular = sp.rpy_from_SE3(odom_diff)[2]/time_diff  # angular.z
            vel_linear = odom_diff[0,3]/time_diff # linear.x
            
            # Calculate current noisy pose from starting point (noisy odom pose)
            # Current velocity with some level of error transformed into an expected pose
            # Between last and current odom reading
            # NOTE error is now usually positive multiplier to better simulate wheel encoder
            # errors (always think you have travelled further than you have)
            lin_vel_noisy = vel_linear + \
                            vel_linear * _noisy(self.noise_linear)
            ang_vel_noisy = vel_angular + \
                            vel_angular * _noisy(self.noise_angular)
            
            # Turn velocities back into distances
            lin_move = lin_vel_noisy * time_diff
            ang_move = ang_vel_noisy * time_diff
            
            self._nodom = np.matmul(
                self._nodom,
                np.matmul(
                    sp.SE3_from_translation(lin_move),
                    sp.SE3_from_yaw(ang_move)),
            )

            # Calculate the error between what we read here and the true odometry
            odom_error = np.matmul(sp.pose_msg_to_SE3(odom_msg.pose), 
                                   np.linalg.inv(self._nodom))
            
            # Calculate localisation transform from map to odom frame to accomodate for 
            # calculated error
            localisation = np.matmul(self._start_pose,
                                     odom_error)

            # Publish our messages
            o = Odometry()
            o.header.stamp = odom_msg.header.stamp
            o.header.frame_id = self.out_frame_odom
            o.child_frame_id = self.out_frame_robot
            o.pose.pose = _SE3_to_pose_msg(self._nodom)
            o.pose.covariance = odom_msg.pose.covariance
            # TODO establish whether this twist should be the cmd vel twist 
            # or calculated "true" velocity
            o.twist.twist = self._last_vel
            self._pub_odom.publish(o)

            t = TransformStamped()
            t.header.stamp = odom_msg.header.stamp
            t.header.frame_id = self.out_frame_map
            t.child_frame_id = self.out_frame_odom
            t.transform = _SE3_to_tf_msg(localisation)
            self._tf.sendTransform(t)

            t = TransformStamped()
            t.header.stamp = odom_msg.header.stamp
            t.header.frame_id = self.out_frame_odom
            t.child_frame_id = self.out_frame_robot
            t.transform = _SE3_to_tf_msg(self._nodom)
            self._tf.sendTransform(t)

            # Update time and odom
            self._last_time = current_time
            self._last_odom = current_odom

            

    def update_start_pose(self, start_pose_msg):
        with self._lock:
            self._initialised = False
            self._last_time = rospy.get_time()
            self._start_pose = sp.wxyzXYZ_to_SE3(*np.array([
                float(x.strip()) for x in start_pose_msg.data.replace(
                    '[', '').replace(']', '').split(',')
            ]))

    def update_vel(self, vel_msg):
        with self._lock:
            self._last_vel = vel_msg


if __name__ == '__main__':
    rospy.init_node("noisify_odom")

    pn = PoseNoisifier()

    rospy.spin()
