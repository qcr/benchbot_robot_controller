#!/usr/bin/env python3

from __future__ import print_function

import benchbot_spatial as sp
import numpy as np
import os
import rospy
import tf2_ros
import types

from geometry_msgs.msg import Twist

import sys

sys.path.append(
    os.path.join(os.path.dirname(os.path.realpath(__file__)), '../src'))
import robot_callbacks as rc


class DummyController():

    class DummyEvent():

        def __init__(self):
            pass

        def is_set(self):
            return False

    class DummyInstance():

        def __init__(self):
            pass

        def is_collided(self):
            return False

        def is_dirty(self):
            return False

    def __init__(self):
        self.evt = DummyController.DummyEvent()
        self.instance = DummyController.DummyInstance()

        self.config = {
            'task': {
                'name': 'ground_truth'
            },
            'robot': {
                'global_frame': 'map',
                'robot_frame': 'base_link'
            }
        }
        self.state = {'initial_pose': 0}

        self.tf_buffer = tf2_ros.Buffer()
        self._tf_listener = tf2_ros.TransformListener(self.tf_buffer)


if __name__ == '__main__':
    rospy.init_node("debug_move_to_pose")

    p = rospy.Publisher('/cmd_vel', Twist, queue_size=100)
    d = DummyController()

    # Wait for tf to exist (there's something really dodgy going on here...)
    t = None
    print("Waiting for tf...")
    while not rospy.is_shutdown() and t is None:
        try:
            t = d.tf_buffer.lookup_transform('map', 'base_link',
                                             rospy.Time.now(),
                                             rospy.Duration(1.0))
        except Exception as e:
            print("ERROR: %s" % e)
            pass
    print("Got initial tf.")

    while not rospy.is_shutdown():
        c = sp.SE3_to_SE2(rc._current_pose(d))

        # Get goal from terminal
        goal_xyt = None
        while goal_xyt is None:
            print("Relative goal (format: x,y,th): ", end='')
            r = raw_input()
            if len(r) == 0:
                sys.exit(0)
            g = r.split(',')
            if len(g) == 3:
                goal_xyt = []
                for x in g:
                    try:
                        goal_xyt.append(float(x))
                    except:
                        goal_xyt = None
                        break
        goal_rel = sp.SE3_to_SE2(
            np.matmul(sp.SE3_from_translation(goal_xyt[0], goal_xyt[1]),
                      sp.SE3_from_yaw(goal_xyt[2])))
        goal_abs = np.matmul(c, goal_rel)

        # Print some information about the goal
        ct = sp.SE2_to_xyt(c)
        grt = sp.SE2_to_xyt(goal_rel)
        gat = sp.SE2_to_xyt(goal_abs)
        print(
            "Going from:\t(%f,%f,%f)\n\tto\t(%f,%f,%f)\n\tdelta\t(%f,%f,%f)" %
            (ct[0], ct[1], ct[2], gat[0], gat[1], gat[2], grt[0], grt[1],
             grt[2]))

        # Try and move to the goal
        rc._move_to_pose(sp.SE2_to_SE3(goal_abs), p, d)
